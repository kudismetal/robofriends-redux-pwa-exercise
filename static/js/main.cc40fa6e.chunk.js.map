{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/CounterButton.js","components/Header.js","containers/App.js","actions.js","constants.js","registerServiceWorker.js","reducers.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","console","log","map","user","i","key","SearchBox","searchfield","searchChange","aria-label","type","placeholder","onChange","Scroll","props","style","overflow","border","height","children","CounterButton","updateCount","setState","state","count","nextProps","nextState","this","color","onClick","Component","Header","App","getRobots","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","connect","searchRobotsReducer","requestRobotsReducer","error","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","searchRobotsInitialState","requestRobotsInitialState","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.cc40fa6e.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({ name, email, id }) => {\n  return (\n    <div className='tc grow bg-light-green br3 pa3 ma2 dib bw2 shadow-5'>\n      <img alt='robots' src={`https://robohash.org/${id}?size=200x200`} />\n      <div>\n        <h2>{name}</h2>\n        <p>{email}</p>\n      </div>\n    </div>\n  );\n}\n\nexport default Card;\n","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({ robots }) => {\n  console.log('CardList');\n  return (\n    <div>\n      {\n        robots.map((user, i) => {\n          return (\n            <Card\n              key={i}\n              id={robots[i].id}\n              name={robots[i].name}\n              email={robots[i].email}\n              />\n          );\n        })\n      }\n    </div>\n  );\n}\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({ searchfield, searchChange }) => {\n  console.log('SearchBox');\n  return (\n    <div className='pa2'>\n      <input\n        aria-label='Search Robots'\n        className='pa3 ba b--green bg-lightest-blue'\n        type='search'\n        placeholder='search robots'\n        onChange={searchChange}\n      />\n    </div>\n  );\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n  return (\n    <div style={{ overflow: 'scroll', border: '5px solid black', height: '800px'}}>\n      {props.children}\n    </div>\n  );\n};\n\nexport default Scroll;","import React, { Component } from 'react'\n\nclass CounterButton extends Component {\n  constructor() {\n    super();\n    this.state = {\n      count: 0\n    }\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    if (this.state.count !== nextState.count) {\n      return true\n    }\n    return false\n  }\n\n  updateCount = () => {\n    this.setState(state => ({ count: state.count + 1 }))\n  }\n\n  render() {\n    console.log('CounterButton');\n    return (\n      <button color={this.props.color} onClick={this.updateCount}>Count: {this.state.count}</button>\n    )\n  }\n}\n\nexport default CounterButton;","import React, { Component } from 'react'\nimport CounterButton from './CounterButton'\n\nclass Header extends Component {\n  // shouldComponentUpdate(nextProps, nextState) {\n  //   return false;\n  // }\n\n  render() {\n    console.log('Header');\n    return (\n      <div>\n        <h1 className='f1'>RoboFriends</h1>\n        <CounterButton color={'red'} />\n      </div>\n    )\n  }\n}\n\nexport default Header;","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport './App.css';\nimport { setSearchField, requestRobots } from '../actions';\nimport Header from '../components/Header';\n\nclass App extends Component {\n  componentDidMount() {\n    const { getRobots } = this.props;\n    getRobots();\n  }\n\n  render() {\n    const { searchField, onSearchChange, robots, isPending } = this.props;\n    const filteredRobots = robots.filter(robot =>{\n      return robot.name.toLowerCase().includes(searchField.toLowerCase());\n    })\n    return isPending ?\n      <h1>Loading</h1> :\n      (\n        <div className='tc'>\n          <Header />\n          <SearchBox searchChange={onSearchChange}/>\n          <Scroll>\n            <CardList robots={filteredRobots} />\n          </Scroll>\n        </div>\n      );\n  }\n}\n\nconst mapStateToProps = ({ searchRobotsReducer, requestRobotsReducer }) => ({\n  searchField: searchRobotsReducer.searchField,\n  robots: requestRobotsReducer.robots,\n  isPending: requestRobotsReducer.isPending,\n  error: requestRobotsReducer.error\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n  getRobots: () => dispatch(requestRobots())\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import { SET_SEARCH_FIELD, REQUEST_ROBOTS_PENDING, REQUEST_ROBOTS_SUCCESS, REQUEST_ROBOTS_FAILED } from './constants';\n\nexport const setSearchField = (text) => ({\n  type: SET_SEARCH_FIELD,\n  payload: text\n})\n\nexport const requestRobots = () => (dispatch) => {\n  dispatch({\n    type: REQUEST_ROBOTS_PENDING\n  });\n\n  fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\n    .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }))\n}","export const SET_SEARCH_FIELD = \"SET_SEARCH_FIELD\";\n\nexport const REQUEST_ROBOTS_PENDING = \"REQUEST_ROBOTS_PENDING\";\nexport const REQUEST_ROBOTS_SUCCESS = \"REQUEST_ROBOTS_SUCCESS\";\nexport const REQUEST_ROBOTS_FAILED = \"REQUEST_ROBOTS_FAILED\";\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { SET_SEARCH_FIELD, REQUEST_ROBOTS_PENDING, REQUEST_ROBOTS_SUCCESS, REQUEST_ROBOTS_FAILED } from './constants';\n\nconst searchRobotsInitialState = {\n  searchField: ''\n};\n\nexport const searchRobotsReducer = (state = searchRobotsInitialState, action = {}) => {\n  switch (action.type) {\n    case SET_SEARCH_FIELD:\n      return Object.assign({}, state, { \n        searchField: action.payload\n      });\n  \n    default:\n      return state;\n  }\n}\n\nconst requestRobotsInitialState = {\n  isPending: false,\n  robots: [],\n  error: ''\n}\n\nexport const requestRobotsReducer = (state = requestRobotsInitialState, action = {}) => {\n  switch (action.type) {\n    case REQUEST_ROBOTS_PENDING:\n      return Object.assign({}, state, {\n        isPending: true\n      })\n\n    case REQUEST_ROBOTS_SUCCESS:\n      return Object.assign({}, state, {\n        robots: action.payload,\n        isPending: false\n      })\n    \n    case REQUEST_ROBOTS_FAILED:\n      return Object.assign({}, state, {\n        error: action.payload,\n        isPending: false\n      })\n\n    default:\n      return state;\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers, compose } from 'redux';\nimport 'tachyons';\n// import { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport App from './containers/App';\nimport registerServiceWorker from './registerServiceWorker';\nimport { searchRobotsReducer, requestRobotsReducer } from './reducers';\n\n// const logger = createLogger();\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst rootReducer = combineReducers({ searchRobotsReducer, requestRobotsReducer })\nconst store = createStore(\n  rootReducer,\n  composeEnhancers(\n    applyMiddleware(\n      thunkMiddleware,\n      // logger\n    )\n  )\n);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>\n  , document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}